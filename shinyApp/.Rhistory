panel.background = element_blank()) +
scale_x_continuous(breaks = df_all$Year, labels = df_all$Year) +
scale_linetype_manual(values = c("Observed" = "solid", "Predicted" = "dashed", "Dashed Connection" = "dashed"))
labs(linetype = "")
my_plot <-ggplotly(my_plot, tooltip = c("x", "y"))
my_plot <- my_plot %>% layout(legend = list(title = list(text = "")))
my_plot
}else{
filtered_df <- filter(df, Year %in% year , Country %in% country,Cause %in% causes)
aggregated_df <- aggregate(cbind(mortality) ~ Country + Year + Sex, data = filtered_df, FUN = sum)
forecast_result <- forecast_sex(aggregated_df)
future_data <- forecast_result$future_data
future_years <- forecast_result$future_years
df_all <- bind_rows(aggregated_df, future_data)
my_plot <- ggplot(df_all, aes(x = Year, y = mortality, color = Sex)) +
geom_line(aes(linetype = if_else(Year <= max(aggregated_df$Year) & Year != min(future_years$Year), "Observed", "Predicted"))) +
geom_line(data = filter(df_all, Year == max(aggregated_df$Year) | Year == min(future_years$Year)), aes(linetype = "Dashed Connection"), size = 1) +
geom_point() +
theme(axis.line = element_line(colour = "black", size = 1),
panel.grid.major.y = element_line(color = "#EAEAEA",size = 2),
panel.grid.major.x= element_blank(),
panel.background = element_blank()) +
scale_x_continuous(breaks = df_all$Year, labels = df_all$Year) +
scale_linetype_manual(values = c("Observed" = "solid", "Predicted" = "dashed", "Dashed Connection" = "dashed"))
labs(linetype = "")
my_plot <-ggplotly(my_plot, tooltip = c("x", "y"))
my_plot <- my_plot %>% layout(legend = list(title = list(text = "")))
my_plot
}
}
forecast_sex <- function(aggregated_df) {
future_years <- data.frame(Year = (max(aggregated_df$Year) + 1):(max(aggregated_df$Year) + 5))
sex_levels <- unique(aggregated_df$Sex)
future_data <- lapply(sex_levels, function(sex) {
model <- lm(mortality ~ Year, data = filter(aggregated_df, Sex == sex))
mutate(future_years, Sex = sex, mortality = predict(model, future_years))
})
list(future_data = bind_rows(future_data), future_years = future_years)
}
forecast_age_group <- function(aggregated_df) {
future_years <- data.frame(Year = (max(aggregated_df$Year) + 1):(max(aggregated_df$Year) + 5))
Age_group_levels <- unique(aggregated_df$Age_group)
future_data <- lapply(Age_group_levels, function(age_group) {
model <- lm(mortality ~ Year, data = filter(aggregated_df, Age_group == age_group))
mutate(future_years, Age_group = age_group, mortality = predict(model, future_years))
})
list(future_data = bind_rows(future_data), future_years = future_years)
}
line3_B <- function(df,year,country, sex, age_group,causes){
filtered_df <- filter(df, Year %in% year , Country %in% country, Sex %in% sex ,Cause %in% causes,Age_group %in% age_group)
aggregated_df <- aggregate(cbind(mortality) ~ Country + Year + Sex, data = filtered_df, FUN = sum)
forecast_result <- forecast_country(aggregated_df)
future_data <- forecast_result$future_data
future_years <- forecast_result$future_years
df_all <- bind_rows(aggregated_df, future_data)
my_plot <- ggplot(df_all, aes(x = Year, y = mortality, color = Country)) +
geom_line(aes(linetype = if_else(Year <= max(aggregated_df$Year) & Year != min(future_years$Year), "Observed", "Predicted"))) +
geom_line(data = filter(df_all, Year == max(aggregated_df$Year) | Year == min(future_years$Year)), aes(linetype = "Dashed Connection"), size = 1) +
geom_point() +
theme(axis.line = element_line(colour = "black", size = 1),
panel.grid.major.y = element_line(color = "#EAEAEA",size = 2),
panel.grid.major.x= element_blank(),
panel.background = element_blank()) +
scale_x_continuous(breaks = df_all$Year, labels = df_all$Year) +
scale_linetype_manual(values = c("Observed" = "solid", "Predicted" = "dashed", "Dashed Connection" = "dashed"))
labs(linetype = "")
my_plot <-ggplotly(my_plot, tooltip = c("x", "y"))
my_plot <- my_plot %>% layout(legend = list(title = list(text = "")))
my_plot
}
forecast_country <- function(aggregated_df) {
future_years <- data.frame(Year = (max(aggregated_df$Year) + 1):(max(aggregated_df$Year) + 5))
country_levels <- unique(aggregated_df$Country)
future_data <- lapply(country_levels, function(country) {
model <- lm(mortality ~ Year, data = filter(aggregated_df, Country == country))
mutate(future_years, Country = country, mortality = predict(model, future_years))
})
list(future_data = bind_rows(future_data), future_years = future_years)
}
vb <- function(df,country, year ){
filtered_df <- filter(df, Country %in% country, Year %in% year, Sex =="All")
aggregated_df <- aggregate(cbind(mortality) ~ Country + Year, data = filtered_df, FUN = sum)
aggregated_df$mortality[1]
}
runApp("shinyApp")
runApp("shinyApp")
library(shiny)
runApp("shinyApp")
list.files("shinyApp")
getwd()
runApp("C:/Users/gene9/Desktop/IE6600-final-project/shinyApp")
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
# Add a button to start the tutorial
actionButton("start_tutorial", "Start tutorial"),
# Add a plot and a table to the app
plotOutput("plot"),
tableOutput("table")
)
server <- function(input, output) {
# Define the plot
output$plot <- renderPlot({
plot(cars)
})
# Define the table
output$table <- renderTable({
head(mtcars)
})
# Initialize the tutorial when the "Start tutorial" button is clicked
observeEvent(input$start_tutorial, {
# Initialize Intro.js
introjsUI(
steps = list(
list(
element = "#plot",
intro = "This is a plot of car speeds and stopping distances."
),
list(
element = "#table",
intro = "This is a table of car specifications."
)
),
options = list(
showProgress = TRUE,
skipLabel = "Exit",
doneLabel = "End"
)
)
# Show a tooltip box when the plot is clicked
introBox(
id = "plot_box",
element = "#plot",
text = "Click here to zoom in on the plot."
)
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
# Add a button to start the tutorial
actionButton("start_tutorial", "Start tutorial"),
# Add a plot and a table to the app
plotOutput("plot"),
tableOutput("table")
)
server <- function(input, output) {
# Define the plot
output$plot <- renderPlot({
plot(cars)
})
# Define the table
output$table <- renderTable({
head(mtcars)
})
# Initialize the tutorial when the "Start tutorial" button is clicked
observeEvent(input$start_tutorial, {
# Initialize Intro.js
introjsUI(
steps = list(
list(
element = "#plot",
intro = "This is a plot of car speeds and stopping distances."
),
list(
element = "#table",
intro = "This is a table of car specifications."
)
),
options = list(
showProgress = TRUE,
skipLabel = "Exit",
doneLabel = "End"
)
)
# Show a tooltip box when the plot is clicked
introBox(
id = "plot_box",
element = "#plot",
text = "Click here to zoom in on the plot."
)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
library(plotly)
library(rintrojs)
library(fmsb)
library(scales)
library(tidyquant)
library(RColorBrewer)
library(shinyalert)
library(shinydashboard)
library(readr)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
library(plotly)
library(rintrojs)
library(fmsb)
library(scales)
library(tidyquant)
library(RColorBrewer)
library(shinyalert)
library(shinydashboard)
library(readr)
library(shinyjs)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
# Add a button to start the tutorial
actionButton("start_tutorial", "Start tutorial"),
# Add a plot and a table to the app
plotOutput("plot"),
tableOutput("table")
)
server <- function(input, output) {
# Define the plot
output$plot <- renderPlot({
plot(cars)
})
# Define the table
output$table <- renderTable({
head(mtcars)
})
# Initialize the tutorial when the "Start tutorial" button is clicked
observeEvent(input$start_tutorial, {
# Initialize Intro.js
introjsUI(
steps = list(
list(
element = "#plot",
intro = "This is a plot of car speeds and stopping distances."
),
list(
element = "#table",
intro = "This is a table of car specifications."
)
),
options = list(
showProgress = TRUE,
skipLabel = "Exit",
doneLabel = "End"
)
)
# Show a tooltip box when the plot is clicked
introBox(
id = "plot_box",
element = "#plot",
text = "Click here to zoom in on the plot."
)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
introjsUI(),
introBox(
h1("Marsala!"),
data.step = 1,
data.intro = "This is our group name"
),
)
)
server <- function(input, output) { }
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
introjsUI(),
introBox(
element = ".content-header h1", # Target the h1 element in the header
text = "This is our group name" # Set the text for the tooltip box
)
)
)
server <- function(input, output) {}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
actionButton( # Replace tags$button with actionButton
inputId = "btn",
label = "Get a Tour!",
class = "btn btn-primary btn-lg",
style = "background-color: primary; border-color: primary;"
)
),
dashboardBody(
introjsUI(),
introBox(
h1("Marsala!"),
data.step = 1,
data.intro = "This is our group name"
),
)
)
server <- function(input, output) {
##Tour observe
observeEvent(input$btn,
introjs(session))
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
actionButton( # Replace tags$button with actionButton
inputId = "btn",
label = "Get a Tour!",
class = "btn btn-primary btn-lg",
style = "background-color: primary; border-color: primary;"
)
),
dashboardBody(
introjsUI(),
introBox(
h1("Marsala!"),
data.step = 1,
data.intro = "This is our group name"
),
)
)
server <- function(input, output) {
##Tour observe
observeEvent(input$btn,
introjs(session))
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
actionButton( # Replace tags$button with actionButton
inputId = "btn",
label = "Get a Tour!",
class = "btn btn-primary btn-lg",
style = "background-color: primary; border-color: primary;"
)
),
dashboardBody(
introjsUI(),
introBox(
h1("Marsala!"),
data.step = 1,
data.intro = "This is our group name"
),
)
)
server <- function(input, output) {
##Tour observe
observeEvent(input$btn,
introjs(session))
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
actionButton(
inputId = "btn",
label = "Get a Tour!",
class = "btn btn-primary btn-lg",
style = "background-color: primary; border-color: primary;"
)
),
dashboardBody(
introjsUI(),
introBox(
h1("Marsala!"),
data.step = 1,
data.intro = "This is our group name"
)
)
)
server <- function(input, output, session) {
observeEvent(input$btn, {
introjsUI(
steps = list(
list(element = ".content-header h1", intro = "This is our group name"),
list(element = ".sidebar", intro = "This is the sidebar"),
list(element = ".content-wrapper", intro = "This is the main content area")
),
options = list(showProgress = TRUE, skipLabel = "Exit", doneLabel = "End"),
tooltipPosition = "bottom"
)(session)
})
}
shinyApp(ui, server)
if (FALSE) {
library(rintrojs)
library(shiny)
ui <- shinyUI(fluidPage(
introjsUI(), # must include in UI
mainPanel(
introBox(
tableOutput("mtcars"),
data.step = 1,
data.intro = "This is the table"
),
introBox(
actionButton("btn","Intro"),
data.step = 2,
data.intro = "This is the button"
)
)))
server <- shinyServer(function(input, output, session) {
output$mtcars <- renderTable({
head(mtcars)
})
observeEvent(input$btn,
introjs(session))
})
# Run the application
shinyApp(ui = ui, server = server)
}
library(rintrojs)
library(shiny)
ui <- shinyUI(fluidPage(
introjsUI(), # must include in UI
mainPanel(
introBox(
tableOutput("mtcars"),
data.step = 1,
data.intro = "This is the table"
),
introBox(
actionButton("btn","Intro"),
data.step = 2,
data.intro = "This is the button"
)
)))
server <- shinyServer(function(input, output, session) {
output$mtcars <- renderTable({
head(mtcars)
})
observeEvent(input$btn,
introjs(session))
})
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(shinyalert)
ui <- fluidPage(
useShinyalert(),
actionButton("show_alert", "Show Alert")
)
server <- function(input, output) {
observeEvent(input$show_alert, {
shinyalert("Hello, world!")
})
}
shinyApp(ui, server)
library(shiny)
library(shinyalert)
ui <- fluidPage(
useShinyalert(),
actionButton("show_alert", "Show Alert")
)
server <- function(input, output) {
observeEvent(input$show_alert, {
shinyalert("Hello, world!")
})
}
shinyApp(ui, server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='ve821j-0-0',
token='7A7528F6FC9CC509AFB452292792FFF1',
secret='<SECRET>')
library(shiny)
library(shinyalert)
ui <- fluidPage(
useShinyalert(),
actionButton("show_alert", "Show AD")
)
server <- function(input, output) {
observeEvent(input$show_alert, {
shinyalert(
title = "Advertisement",
text = "细兄弟就来砍我!",
)
})
}
shinyApp(ui, server)
